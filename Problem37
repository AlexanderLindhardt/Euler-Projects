package euler;

public class euler37 {
	public static int removeLeft(int n) {
		String s = Integer.toString(n);
		String[] s1 = s.split("");
		int[] res = new int[s1.length-1];
		int fin =0;
		for (int i = 0; i < s1.length-1; i++) {
			res[i] = Integer.parseInt(s1[i+1]);
		}
		for (int i = 0; i < res.length; i++) { // Makes int[] back to int.
			fin = 10 * fin + res[i];
		}
		return fin;
	}
	public static int removeRight(int n) {
		String s = Integer.toString(n);
		String[] s1 = s.split("");
		int[] res = new int[s1.length-1];
		int fin =0;
		for (int i = 0; i < s1.length-1; i++) {
			res[i] = Integer.parseInt(s1[i]);
		}
		for (int i = 0; i < res.length; i++) { // Makes int[] back to int.
			fin = 10 * fin + res[i];
		}
		return fin;
	}
	public static boolean isTruncPrimeLeft(int n) {
		String s = Integer.toString(n); 
		for (int i = 0; i <= s.length()-1; i++) {
			if (!euler35.isPrime(n)) return false;
			n=removeLeft(n);
		}
		return true;

	}
	public static boolean isTruncPrimeRight(int n) {
		String s = Integer.toString(n);
		for (int i = 0; i <= s.length()-1; i++) {
			if (!euler35.isPrime(n)) return false;
			n=removeRight(n);
		}
		return true;

	}
	public static void main(String[] args) {
	 int tot = 0;
	 int num = 10;
	 int sum = 0;
	 while(tot <= 10) {
		 if (isTruncPrimeLeft(num) && isTruncPrimeRight(num)) {
			 tot ++;
			 sum += num;
			 System.out.println(num);
		 }
		 num++;
		 
	 }
	 System.out.println(sum);
	}

}

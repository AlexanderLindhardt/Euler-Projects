package euler;

public class euler35 {
	public static int rot(int n) {
		String s = Integer.toString(n);
		String[] s1 = s.split("");
		int[] res = new int[s1.length];
		int fin =0;
		res[0] = Integer.parseInt(s1[s1.length-1]);
		for (int i = 1; i < res.length; i++) {
			res[i] = Integer.parseInt(s1[i-1]);
		}
		for (int i = 0; i < res.length; i++) {
			fin = 10*fin + res[i];
		}
		return fin;
	}
	public static boolean isPrime(int n) {
		if (n == 1) return false;
		for (int i = 2; i <= Math.sqrt(Math.abs(n)); i++) {
			if (n % i == 0) return false;
		}
		return true;
	}
	public static boolean isRotPrime(int n) {
		String s = Integer.toString(n);
		String[] s1 = s.split("");
		if (n % 10 ==0) return false; //Since my rot(int n) messes up when the number ends at 0.
		for (int i = 0; i <= s1.length; i++) {
			n=rot(n);
			if (!isPrime(n)) return false;
		}
		return true;

	}
	
	public static void main(String[] args) {
		//System.out.println(rot(12));
		//System.out.println(isRotPrime(99));
		int tot = 0;
		for (int i = 0; i < 1000000; i++) {
			if(isRotPrime(i)) {
				//System.out.println(i);
				tot ++;
			}
		}
		System.out.println(tot);

	}

}
